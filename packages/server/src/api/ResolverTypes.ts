// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Question, Region, Name, Language } from "./SchemaTypes";
import { Context } from "./SchemaTypes";

type QuestionDifficulty = "EASY" | "MEDIUM" | "HARD";
type QuestionType = "MULTIPLE" | "BOOLEAN";

export namespace QueryResolvers {
    export const defaultResolvers = {};

    export interface ArgsTriviaQuestion {
        difficulty: QuestionDifficulty | null;
        type: QuestionType | null;
    }

    export interface ArgsRegion {
        id: number;
    }

    export type TriviaQuestionResolver = (
        parent: undefined,
        args: ArgsTriviaQuestion,
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Question | Promise<Question>;

    export type RegionResolver = (
        parent: undefined,
        args: ArgsRegion,
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Region | Promise<Region>;

    export type RegionsResolver = (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Region[] | Promise<Region[]>;

    export interface Type {
        triviaQuestion: (
            parent: undefined,
            args: ArgsTriviaQuestion,
            ctx: Context,
            info: GraphQLResolveInfo
        ) => Question | Promise<Question>;

        region: (
            parent: undefined,
            args: ArgsRegion,
            ctx: Context,
            info: GraphQLResolveInfo
        ) => Region | Promise<Region>;

        regions: (parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => Region[] | Promise<Region[]>;
    }
}

export namespace QuestionResolvers {
    export const defaultResolvers = {
        category: (parent: Question) => parent.category,
        type: (parent: Question) => parent.type,
        difficulty: (parent: Question) => parent.difficulty,
        question: (parent: Question) => parent.question,
        correctAnswer: (parent: Question) => parent.correctAnswer,
        incorrectAnswers: (parent: Question) => parent.incorrectAnswers,
    };

    export type CategoryResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type TypeResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type DifficultyResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type QuestionResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type CorrectAnswerResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type IncorrectAnswersResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    export interface Type {
        category: (parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        type: (parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        difficulty: (parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        question: (parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        correctAnswer: (parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        incorrectAnswers: (
            parent: Question,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => string[] | Promise<string[]>;
    }
}

export namespace RegionResolvers {
    export const defaultResolvers = {
        id: (parent: Region) => parent.id,
        name: (parent: Region) => parent.name,
        names: (parent: Region) => parent.names,
    };

    export type IdResolver = (
        parent: Region,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => number | Promise<number>;

    export type NameResolver = (
        parent: Region,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NamesResolver = (
        parent: Region,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Name[] | Promise<Name[]>;

    export interface Type {
        id: (parent: Region, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>;

        name: (parent: Region, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        names: (parent: Region, args: {}, ctx: Context, info: GraphQLResolveInfo) => Name[] | Promise<Name[]>;
    }
}

export namespace NameResolvers {
    export const defaultResolvers = {
        name: (parent: Name) => parent.name,
        language: (parent: Name) => parent.language,
    };

    export type NameResolver = (
        parent: Name,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type LanguageResolver = (
        parent: Name,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Language | Promise<Language>;

    export interface Type {
        name: (parent: Name, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        language: (parent: Name, args: {}, ctx: Context, info: GraphQLResolveInfo) => Language | Promise<Language>;
    }
}

export namespace LanguageResolvers {
    export const defaultResolvers = {
        id: (parent: Language) => parent.id,
        name: (parent: Language) => parent.name,
        names: (parent: Language) => parent.names,
        iso3166: (parent: Language) => parent.iso3166,
    };

    export type IdResolver = (
        parent: Language,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => number | Promise<number>;

    export type NameResolver = (
        parent: Language,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NamesResolver = (
        parent: Language,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Name[] | Promise<Name[]>;

    export type Iso3166Resolver = (
        parent: Language,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export interface Type {
        id: (parent: Language, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>;

        name: (parent: Language, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        names: (parent: Language, args: {}, ctx: Context, info: GraphQLResolveInfo) => Name[] | Promise<Name[]>;

        iso3166: (parent: Language, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;
    }
}

export interface Resolvers {
    Query: QueryResolvers.Type;
    Question: QuestionResolvers.Type;
    Region: RegionResolvers.Type;
    Name: NameResolvers.Type;
    Language: LanguageResolvers.Type;
}
