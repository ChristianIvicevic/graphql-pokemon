// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
    Question,
    Location,
    Name,
    Language,
    Region,
    LocationArea,
    PokemonEncounter,
    Pokemon,
    PokemonSprites,
    PokemonSpecies,
    FlavorText,
    Version,
    VersionEncounterDetail,
    Encounter,
} from "./SchemaTypes";
import { Context } from "./SchemaTypes";

type QuestionDifficulty = "EASY" | "MEDIUM" | "HARD";
type QuestionType = "MULTIPLE" | "BOOLEAN";
type LanguageEnum =
    | "JA_HRKT"
    | "ROOMAJI"
    | "KO"
    | "ZH_HANT"
    | "FR"
    | "DE"
    | "ES"
    | "IT"
    | "EN"
    | "CS"
    | "JA"
    | "ZH_HANS";

export namespace QueryResolvers {
    export const defaultResolvers = {};

    export interface ArgsTriviaQuestion {
        difficulty: QuestionDifficulty | null;
        type: QuestionType | null;
    }

    export interface ArgsLocation {
        name: string;
    }

    export interface ArgsRegion {
        name: string;
    }

    export type TriviaQuestionResolver = (
        parent: undefined,
        args: ArgsTriviaQuestion,
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Question | Promise<Question>;

    export type LocationResolver = (
        parent: undefined,
        args: ArgsLocation,
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Location | Promise<Location>;

    export type LocationsResolver = (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Location[] | Promise<Location[]>;

    export type RegionResolver = (
        parent: undefined,
        args: ArgsRegion,
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Region | Promise<Region>;

    export type RegionsResolver = (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Region[] | Promise<Region[]>;

    export interface Type {
        triviaQuestion: (
            parent: undefined,
            args: ArgsTriviaQuestion,
            ctx: Context,
            info: GraphQLResolveInfo
        ) => Question | Promise<Question>;

        location: (
            parent: undefined,
            args: ArgsLocation,
            ctx: Context,
            info: GraphQLResolveInfo
        ) => Location | Promise<Location>;

        locations: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => Location[] | Promise<Location[]>;

        region: (
            parent: undefined,
            args: ArgsRegion,
            ctx: Context,
            info: GraphQLResolveInfo
        ) => Region | Promise<Region>;

        regions: (parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => Region[] | Promise<Region[]>;
    }
}

export namespace QuestionResolvers {
    export const defaultResolvers = {
        category: (parent: Question) => parent.category,
        type: (parent: Question) => parent.type,
        difficulty: (parent: Question) => parent.difficulty,
        question: (parent: Question) => parent.question,
        correctAnswer: (parent: Question) => parent.correctAnswer,
        incorrectAnswers: (parent: Question) => parent.incorrectAnswers,
    };

    export type CategoryResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type TypeResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type DifficultyResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type QuestionResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type CorrectAnswerResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type IncorrectAnswersResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    export interface Type {
        category: (parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        type: (parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        difficulty: (parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        question: (parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        correctAnswer: (parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        incorrectAnswers: (
            parent: Question,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => string[] | Promise<string[]>;
    }
}

export namespace LocationResolvers {
    export const defaultResolvers = {
        id: (parent: Location) => parent.id,
        name: (parent: Location) => parent.name,
        names: (parent: Location) => parent.names,
        region: (parent: Location) => parent.region,
        areas: (parent: Location) => parent.areas,
    };

    export interface ArgsNames {
        languages: LanguageEnum[];
    }

    export type IdResolver = (
        parent: Location,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NameResolver = (
        parent: Location,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NamesResolver = (
        parent: Location,
        args: ArgsNames,
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Name[] | Promise<Name[]>;

    export type RegionResolver = (
        parent: Location,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Region | Promise<Region>;

    export type AreasResolver = (
        parent: Location,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => LocationArea[] | Promise<LocationArea[]>;

    export interface Type {
        id: (parent: Location, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        name: (parent: Location, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        names: (parent: Location, args: ArgsNames, ctx: Context, info: GraphQLResolveInfo) => Name[] | Promise<Name[]>;

        region: (parent: Location, args: {}, ctx: Context, info: GraphQLResolveInfo) => Region | Promise<Region>;

        areas: (
            parent: Location,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => LocationArea[] | Promise<LocationArea[]>;
    }
}

export namespace NameResolvers {
    export const defaultResolvers = {
        name: (parent: Name) => parent.name,
        language: (parent: Name) => parent.language,
    };

    export type NameResolver = (
        parent: Name,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type LanguageResolver = (
        parent: Name,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Language | Promise<Language>;

    export interface Type {
        name: (parent: Name, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        language: (parent: Name, args: {}, ctx: Context, info: GraphQLResolveInfo) => Language | Promise<Language>;
    }
}

export namespace LanguageResolvers {
    export const defaultResolvers = {
        id: (parent: Language) => parent.id,
        name: (parent: Language) => parent.name,
        names: (parent: Language) => parent.names,
        iso3166: (parent: Language) => parent.iso3166,
    };

    export interface ArgsNames {
        languages: LanguageEnum[];
    }

    export type IdResolver = (
        parent: Language,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NameResolver = (
        parent: Language,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NamesResolver = (
        parent: Language,
        args: ArgsNames,
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Name[] | Promise<Name[]>;

    export type Iso3166Resolver = (
        parent: Language,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export interface Type {
        id: (parent: Language, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        name: (parent: Language, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        names: (parent: Language, args: ArgsNames, ctx: Context, info: GraphQLResolveInfo) => Name[] | Promise<Name[]>;

        iso3166: (parent: Language, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;
    }
}

export namespace RegionResolvers {
    export const defaultResolvers = {
        id: (parent: Region) => parent.id,
        name: (parent: Region) => parent.name,
        names: (parent: Region) => parent.names,
        locations: (parent: Region) => parent.locations,
    };

    export interface ArgsNames {
        languages: LanguageEnum[];
    }

    export type IdResolver = (
        parent: Region,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NameResolver = (
        parent: Region,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NamesResolver = (
        parent: Region,
        args: ArgsNames,
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Name[] | Promise<Name[]>;

    export type LocationsResolver = (
        parent: Region,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Location[] | Promise<Location[]>;

    export interface Type {
        id: (parent: Region, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        name: (parent: Region, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        names: (parent: Region, args: ArgsNames, ctx: Context, info: GraphQLResolveInfo) => Name[] | Promise<Name[]>;

        locations: (
            parent: Region,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => Location[] | Promise<Location[]>;
    }
}

export namespace LocationAreaResolvers {
    export const defaultResolvers = {
        id: (parent: LocationArea) => parent.id,
        name: (parent: LocationArea) => parent.name,
        names: (parent: LocationArea) => parent.names,
        location: (parent: LocationArea) => parent.location,
        pokemonEncounters: (parent: LocationArea) => parent.pokemonEncounters,
    };

    export interface ArgsNames {
        languages: LanguageEnum[];
    }

    export type IdResolver = (
        parent: LocationArea,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NameResolver = (
        parent: LocationArea,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NamesResolver = (
        parent: LocationArea,
        args: ArgsNames,
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Name[] | Promise<Name[]>;

    export type LocationResolver = (
        parent: LocationArea,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Location | Promise<Location>;

    export type PokemonEncountersResolver = (
        parent: LocationArea,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => PokemonEncounter[] | Promise<PokemonEncounter[]>;

    export interface Type {
        id: (parent: LocationArea, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        name: (parent: LocationArea, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        names: (
            parent: LocationArea,
            args: ArgsNames,
            ctx: Context,
            info: GraphQLResolveInfo
        ) => Name[] | Promise<Name[]>;

        location: (
            parent: LocationArea,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => Location | Promise<Location>;

        pokemonEncounters: (
            parent: LocationArea,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => PokemonEncounter[] | Promise<PokemonEncounter[]>;
    }
}

export namespace PokemonEncounterResolvers {
    export const defaultResolvers = {
        pokemon: (parent: PokemonEncounter) => parent.pokemon,
        versionDetails: (parent: PokemonEncounter) => parent.versionDetails,
    };

    export type PokemonResolver = (
        parent: PokemonEncounter,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Pokemon | Promise<Pokemon>;

    export type VersionDetailsResolver = (
        parent: PokemonEncounter,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => VersionEncounterDetail[] | Promise<VersionEncounterDetail[]>;

    export interface Type {
        pokemon: (
            parent: PokemonEncounter,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => Pokemon | Promise<Pokemon>;

        versionDetails: (
            parent: PokemonEncounter,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => VersionEncounterDetail[] | Promise<VersionEncounterDetail[]>;
    }
}

export namespace PokemonResolvers {
    export const defaultResolvers = {
        id: (parent: Pokemon) => parent.id,
        name: (parent: Pokemon) => parent.name,
        sprites: (parent: Pokemon) => parent.sprites,
        species: (parent: Pokemon) => parent.species,
    };

    export type IdResolver = (
        parent: Pokemon,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NameResolver = (
        parent: Pokemon,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type SpritesResolver = (
        parent: Pokemon,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => PokemonSprites | Promise<PokemonSprites>;

    export type SpeciesResolver = (
        parent: Pokemon,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => PokemonSpecies | Promise<PokemonSpecies>;

    export interface Type {
        id: (parent: Pokemon, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        name: (parent: Pokemon, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        sprites: (
            parent: Pokemon,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => PokemonSprites | Promise<PokemonSprites>;

        species: (
            parent: Pokemon,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => PokemonSpecies | Promise<PokemonSpecies>;
    }
}

export namespace PokemonSpritesResolvers {
    export const defaultResolvers = {
        frontDefault: (parent: PokemonSprites) => parent.frontDefault,
    };

    export type FrontDefaultResolver = (
        parent: PokemonSprites,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export interface Type {
        frontDefault: (
            parent: PokemonSprites,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => string | Promise<string>;
    }
}

export namespace PokemonSpeciesResolvers {
    export const defaultResolvers = {
        id: (parent: PokemonSpecies) => parent.id,
        name: (parent: PokemonSpecies) => parent.name,
        names: (parent: PokemonSpecies) => parent.names,
        captureRate: (parent: PokemonSpecies) => parent.captureRate,
        flavorTextEntries: (parent: PokemonSpecies) => parent.flavorTextEntries,
    };

    export interface ArgsNames {
        languages: LanguageEnum[];
    }

    export type IdResolver = (
        parent: PokemonSpecies,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NameResolver = (
        parent: PokemonSpecies,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NamesResolver = (
        parent: PokemonSpecies,
        args: ArgsNames,
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Name[] | Promise<Name[]>;

    export type CaptureRateResolver = (
        parent: PokemonSpecies,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => number | Promise<number>;

    export type FlavorTextEntriesResolver = (
        parent: PokemonSpecies,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => FlavorText[] | Promise<FlavorText[]>;

    export interface Type {
        id: (parent: PokemonSpecies, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        name: (parent: PokemonSpecies, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        names: (
            parent: PokemonSpecies,
            args: ArgsNames,
            ctx: Context,
            info: GraphQLResolveInfo
        ) => Name[] | Promise<Name[]>;

        captureRate: (
            parent: PokemonSpecies,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => number | Promise<number>;

        flavorTextEntries: (
            parent: PokemonSpecies,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => FlavorText[] | Promise<FlavorText[]>;
    }
}

export namespace FlavorTextResolvers {
    export const defaultResolvers = {
        flavorText: (parent: FlavorText) => parent.flavorText,
        language: (parent: FlavorText) => parent.language,
        version: (parent: FlavorText) => parent.version,
    };

    export type FlavorTextResolver = (
        parent: FlavorText,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type LanguageResolver = (
        parent: FlavorText,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Language | Promise<Language>;

    export type VersionResolver = (
        parent: FlavorText,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Version | Promise<Version>;

    export interface Type {
        flavorText: (parent: FlavorText, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        language: (
            parent: FlavorText,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => Language | Promise<Language>;

        version: (parent: FlavorText, args: {}, ctx: Context, info: GraphQLResolveInfo) => Version | Promise<Version>;
    }
}

export namespace VersionResolvers {
    export const defaultResolvers = {
        id: (parent: Version) => parent.id,
        name: (parent: Version) => parent.name,
        names: (parent: Version) => parent.names,
    };

    export interface ArgsNames {
        languages: LanguageEnum[];
    }

    export type IdResolver = (
        parent: Version,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NameResolver = (
        parent: Version,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type NamesResolver = (
        parent: Version,
        args: ArgsNames,
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Name[] | Promise<Name[]>;

    export interface Type {
        id: (parent: Version, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        name: (parent: Version, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

        names: (parent: Version, args: ArgsNames, ctx: Context, info: GraphQLResolveInfo) => Name[] | Promise<Name[]>;
    }
}

export namespace VersionEncounterDetailResolvers {
    export const defaultResolvers = {
        version: (parent: VersionEncounterDetail) => parent.version,
        maxChance: (parent: VersionEncounterDetail) => parent.maxChance,
        encounterDetails: (parent: VersionEncounterDetail) => parent.encounterDetails,
    };

    export type VersionResolver = (
        parent: VersionEncounterDetail,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Version | Promise<Version>;

    export type MaxChanceResolver = (
        parent: VersionEncounterDetail,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => number | Promise<number>;

    export type EncounterDetailsResolver = (
        parent: VersionEncounterDetail,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Encounter[] | Promise<Encounter[]>;

    export interface Type {
        version: (
            parent: VersionEncounterDetail,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => Version | Promise<Version>;

        maxChance: (
            parent: VersionEncounterDetail,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => number | Promise<number>;

        encounterDetails: (
            parent: VersionEncounterDetail,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
        ) => Encounter[] | Promise<Encounter[]>;
    }
}

export namespace EncounterResolvers {
    export const defaultResolvers = {
        chance: (parent: Encounter) => parent.chance,
    };

    export type ChanceResolver = (
        parent: Encounter,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => number | Promise<number>;

    export interface Type {
        chance: (parent: Encounter, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>;
    }
}

export interface Resolvers {
    Query: QueryResolvers.Type;
    Question: QuestionResolvers.Type;
    Location: LocationResolvers.Type;
    Name: NameResolvers.Type;
    Language: LanguageResolvers.Type;
    Region: RegionResolvers.Type;
    LocationArea: LocationAreaResolvers.Type;
    PokemonEncounter: PokemonEncounterResolvers.Type;
    Pokemon: PokemonResolvers.Type;
    PokemonSprites: PokemonSpritesResolvers.Type;
    PokemonSpecies: PokemonSpeciesResolvers.Type;
    FlavorText: FlavorTextResolvers.Type;
    Version: VersionResolvers.Type;
    VersionEncounterDetail: VersionEncounterDetailResolvers.Type;
    Encounter: EncounterResolvers.Type;
}
