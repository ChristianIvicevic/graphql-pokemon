schema {
    query: Query,
}

type Query {
    ######################### Open Trivia DB API
    """
    Fetches a question from the Open Trivia DB API. You can optionally specify a difficulty and question type.
    """
    triviaQuestion(difficulty: QuestionDifficulty, type: QuestionType): Question!

    ######################### PokeAPI
    location(id: ID!): Location!
    """
    A list of locations that can be visited within games.
    """
    locations: [Location!]!

    region(id: ID!): Region!
    """
    A list of regions (organized areas) of the Pok√©mon world.
    """
    regions: [Region!]!
}

######################### Open Trivia DB API

enum QuestionDifficulty {
    EASY
    MEDIUM
    HARD
}

enum QuestionType {
    MULTIPLE
    BOOLEAN
}

type Question {
    category: String!
    type: String!
    difficulty: String!
    question: String!
    correctAnswer: String!
    incorrectAnswers: [String!]!
}

######################### PokeAPI

type Name {
    name: String!
    language: Language!
}

type Language {
    id: ID!
    name: String!
    names: [Name!]!
    iso3166: String!
}

type Region {
    id: ID!
    name: String!
    names: [Name!]!
    locations: [Location!]!
}

type Location {
    id: ID!
    name: String!
    names: [Name!]!
    region: Region!
    areas: [LocationArea!]!
}

type LocationArea {
    id: ID!
    name: String!
    names: [Name!]!
    location: Location!
    pokemonEncounters: [PokemonEncounter!]!
}

type PokemonEncounter {
    pokemon: Pokemon!
    versionDetails: [VersionEncounterDetail!]!
}

type VersionEncounterDetail {
    version: Version!
    maxChance: Int!
    encounterDetails: [Encounter!]!
}

type Encounter {
    chance: Int!
}

type Version {
    id: ID!
    name: String!
    names: [Name!]!
}

type Pokemon {
    id: ID!
    name: String!
    sprites: PokemonSprites!
    species: PokemonSpecies!
}

type PokemonSprites {
    frontDefault: String!
}

type PokemonSpecies {
    id: ID!
    name: String!
    names: [Name!]!
    captureRate: Int!
    flavorTextEntries: [FlavorText!]!
}

type FlavorText {
    flavorText: String!
    language: Language!
    version: Version!
}
