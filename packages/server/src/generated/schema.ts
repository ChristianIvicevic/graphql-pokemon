// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Context, Question, Region } from "../api";

type QuestionDifficulty = "EASY" | "MEDIUM" | "HARD";
type QuestionType = "MULTIPLE" | "BOOLEAN";

export namespace QueryResolvers {
    export const defaultResolvers = {};

    export interface ArgsTriviaQuestion {
        difficulty: QuestionDifficulty | null;
        // tslint:disable-next-line:no-reserved-keywords
        type: QuestionType | null;
    }

    export interface ArgsRegion {
        id: number;
    }

    export type TriviaQuestionResolver = (
        parent: undefined,
        args: ArgsTriviaQuestion,
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Question | Promise<Question>;

    export type RegionResolver = (
        parent: undefined,
        args: ArgsRegion,
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Region | Promise<Region>;

    export type RegionsResolver = (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => Region[] | Promise<Region[]>;

    export interface Type {
        triviaQuestion(parent: undefined, args: ArgsTriviaQuestion, ctx: Context, info: GraphQLResolveInfo): Question | Promise<Question>;

        region(parent: undefined, args: ArgsRegion, ctx: Context, info: GraphQLResolveInfo): Region | Promise<Region>;

        regions(parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo): Region[] | Promise<Region[]>;
    }
}

export namespace QuestionResolvers {
    export const defaultResolvers = {
        category: (parent: Question) => parent.category,
        type: (parent: Question) => parent.type,
        difficulty: (parent: Question) => parent.difficulty,
        question: (parent: Question) => parent.question,
        correctAnswer: (parent: Question) => parent.correctAnswer,
        incorrectAnswers: (parent: Question) => parent.incorrectAnswers,
    };

    export type CategoryResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type TypeResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type DifficultyResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type QuestionResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type CorrectAnswerResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export type IncorrectAnswersResolver = (
        parent: Question,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    export interface Type {
        category(parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo): string | Promise<string>;

        type(parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo): string | Promise<string>;

        difficulty(parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo): string | Promise<string>;

        question(parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo): string | Promise<string>;

        correctAnswer(parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo): string | Promise<string>;

        incorrectAnswers(parent: Question, args: {}, ctx: Context, info: GraphQLResolveInfo): string[] | Promise<string[]>;
    }
}

export namespace RegionResolvers {
    export const defaultResolvers = {
        id: (parent: Region) => parent.id,
        name: (parent: Region) => parent.name,
    };

    export type IdResolver = (
        parent: Region,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => number | Promise<number>;

    export type NameResolver = (
        parent: Region,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
    ) => string | Promise<string>;

    export interface Type {
        id(parent: Region, args: {}, ctx: Context, info: GraphQLResolveInfo): number | Promise<number>;

        name(parent: Region, args: {}, ctx: Context, info: GraphQLResolveInfo): string | Promise<string>;
    }
}

export interface Resolvers {
    Query: QueryResolvers.Type;
    Question: QuestionResolvers.Type;
    Region: RegionResolvers.Type;
}
