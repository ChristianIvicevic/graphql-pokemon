import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by @pongsatt/graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  
  /**
   * Fetches a question from the Open Trivia DB Api. You can optionally specify a difficulty and question type.
   */
  getQuestion: GQLQuestion;
}

export enum GQLQuestionDifficulty {
  EASY = 'EASY',
  MEDIUM = 'MEDIUM',
  HARD = 'HARD'
}

export enum GQLQuestionType {
  MULTIPLE = 'MULTIPLE',
  BOOLEAN = 'BOOLEAN'
}

export interface GQLQuestion {
  category: string;
  type: string;
  difficulty: string;
  question: string;
  correctAnswer: string;
  incorrectAnswers: string[];
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Question?: GQLQuestionTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  getQuestion?: QueryToGetQuestionResolver<TParent>;
}

export interface QueryToGetQuestionArgs {
  difficulty?: GQLQuestionDifficulty;
  type?: GQLQuestionType;
}
export interface QueryToGetQuestionResolver<TParent = any, TResult = GQLQuestion|Promise<GQLQuestion>> {
  (parent: TParent, args: QueryToGetQuestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLQuestionTypeResolver<TParent = any> {
  category?: QuestionToCategoryResolver<TParent>;
  type?: QuestionToTypeResolver<TParent>;
  difficulty?: QuestionToDifficultyResolver<TParent>;
  question?: QuestionToQuestionResolver<TParent>;
  correctAnswer?: QuestionToCorrectAnswerResolver<TParent>;
  incorrectAnswers?: QuestionToIncorrectAnswersResolver<TParent>;
}

export interface QuestionToCategoryResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToTypeResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToDifficultyResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToQuestionResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToCorrectAnswerResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToIncorrectAnswersResolver<TParent = any, TResult = Array<string>|Promise<Array<string>>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
